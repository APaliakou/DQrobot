<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.0.1 (Python 3.10.5 on win32)" generated="20221117 22:54:13.801" rpa="false" schemaversion="3">
<suite id="s1" name="MSSQL connect" source="C:\Project\other\DQ\DQrobot\tests\MSSQL_connect.robot">
<test id="s1-t1" name="Verify that hire_date of employees is filled" line="12">
<kw name="Connect to DB">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymssql</arg>
<arg>${DBName}</arg>
<arg>${DBUser}</arg>
<arg>${DBPass}</arg>
<arg>${DBHost}</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<msg timestamp="20221117 22:54:13.860" level="INFO">Connecting using : pymssql.connect(database=TRN, user=T1000, password=admin, host=localhost, port=1433) </msg>
<status status="PASS" starttime="20221117 22:54:13.852" endtime="20221117 22:54:13.885"/>
</kw>
<status status="PASS" starttime="20221117 22:54:13.852" endtime="20221117 22:54:13.885"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${outputlog}</var>
<arg>${Counts_hr.employees}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20221117 22:54:13.885" level="INFO">Executing : Query  |  select count(*) from hr.employees where hire_date is null </msg>
<msg timestamp="20221117 22:54:13.885" level="INFO">${outputlog} = [(0,)]</msg>
<status status="PASS" starttime="20221117 22:54:13.885" endtime="20221117 22:54:13.885"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${outputlog}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221117 22:54:13.885" level="INFO">[(0,)]</msg>
<status status="PASS" starttime="20221117 22:54:13.885" endtime="20221117 22:54:13.885"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${outputlog}</arg>
<arg>[(0,)]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20221117 22:54:13.885" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20221117 22:54:13.885" endtime="20221117 22:54:13.885"/>
</kw>
<doc>| *Setup:*
| 0. Establish connection to db
| 1. Execute necessary DQ check
|
| *Teste Steps:*
| 2.Query DQ check for table</doc>
<tag>Task_1_Employee_hire_date</tag>
<status status="PASS" starttime="20221117 22:54:13.852" endtime="20221117 22:54:13.885"/>
</test>
<test id="s1-t2" name="Check AVG salary from for all Emplyees" line="26">
<kw name="Query" library="DatabaseLibrary">
<var>${outputlog}</var>
<arg>${AVG_Salary}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20221117 22:54:13.885" level="INFO">Executing : Query  |  SELECT avg(salary) FROM [TRN].[hr].[employees] </msg>
<msg timestamp="20221117 22:54:13.885" level="INFO">${outputlog} = [(Decimal('8060.000000'),)]</msg>
<status status="PASS" starttime="20221117 22:54:13.885" endtime="20221117 22:54:13.885"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${outputlog}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221117 22:54:13.885" level="INFO">[(Decimal('8060.000000'),)]</msg>
<status status="PASS" starttime="20221117 22:54:13.885" endtime="20221117 22:54:13.885"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${outputlog}</arg>
<arg>[(Decimal('8060.000000'),)]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20221117 22:54:13.885" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20221117 22:54:13.885" endtime="20221117 22:54:13.885"/>
</kw>
<doc>| *Setup:*
| 0. Establish connection to db
| 1. Execute necessary DQ check
|
| *Teste Steps:*
| 2.Query DQ check for table</doc>
<tag>Task_1_Employee_AVG_salary</tag>
<status status="PASS" starttime="20221117 22:54:13.885" endtime="20221117 22:54:13.885"/>
</test>
<test id="s1-t3" name="Check Min Min_salary for all jobs" line="39">
<kw name="Query" library="DatabaseLibrary">
<var>${outputlog}</var>
<arg>${Min_Min_Sal}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20221117 22:54:13.901" level="INFO">Executing : Query  |  SELECT min(min_salary) FROM [TRN].[hr].[jobs] </msg>
<msg timestamp="20221117 22:54:13.901" level="INFO">${outputlog} = [(Decimal('2000.00'),)]</msg>
<status status="PASS" starttime="20221117 22:54:13.901" endtime="20221117 22:54:13.901"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${outputlog}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221117 22:54:13.901" level="INFO">[(Decimal('2000.00'),)]</msg>
<status status="PASS" starttime="20221117 22:54:13.901" endtime="20221117 22:54:13.901"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${outputlog}</arg>
<arg>[(Decimal('2000.00'),)]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20221117 22:54:13.901" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20221117 22:54:13.901" endtime="20221117 22:54:13.901"/>
</kw>
<doc>| *Setup:*
| 0. Establish connection to db
| 1. Execute necessary DQ check
|
| *Teste Steps:*
| 2.Query DQ check for table</doc>
<tag>Task_1_Min_Min_salary</tag>
<status status="PASS" starttime="20221117 22:54:13.885" endtime="20221117 22:54:13.901"/>
</test>
<test id="s1-t4" name="Check Max Min_salary for all jobs" line="52">
<kw name="Query" library="DatabaseLibrary">
<var>${outputlog}</var>
<arg>${Max_Min_Sal}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20221117 22:54:13.901" level="INFO">Executing : Query  |  SELECT max(min_salary) FROM [TRN].[hr].[jobs] </msg>
<msg timestamp="20221117 22:54:13.901" level="INFO">${outputlog} = [(Decimal('20000.00'),)]</msg>
<status status="PASS" starttime="20221117 22:54:13.901" endtime="20221117 22:54:13.901"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${outputlog}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221117 22:54:13.901" level="INFO">[(Decimal('20000.00'),)]</msg>
<status status="PASS" starttime="20221117 22:54:13.901" endtime="20221117 22:54:13.901"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${outputlog}</arg>
<arg>[(Decimal('20000.00'),)]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20221117 22:54:13.901" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20221117 22:54:13.901" endtime="20221117 22:54:13.901"/>
</kw>
<doc>| *Setup:*
| 0. Establish connection to db
| 1. Execute necessary DQ check
|
| *Teste Steps:*
| 2.Query DQ check for table</doc>
<tag>Task_1_Min_Min_salary</tag>
<status status="PASS" starttime="20221117 22:54:13.901" endtime="20221117 22:54:13.901"/>
</test>
<test id="s1-t5" name="Check Max len of street adress" line="65">
<kw name="Query" library="DatabaseLibrary">
<var>${outputlog}</var>
<arg>${Max_len_Loc}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20221117 22:54:13.901" level="INFO">Executing : Query  |  SELECT max(len(street_address)) FROM TRN.hr.locations </msg>
<msg timestamp="20221117 22:54:13.919" level="INFO">${outputlog} = [(40,)]</msg>
<status status="PASS" starttime="20221117 22:54:13.901" endtime="20221117 22:54:13.919"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${outputlog}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221117 22:54:13.920" level="INFO">[(40,)]</msg>
<status status="PASS" starttime="20221117 22:54:13.919" endtime="20221117 22:54:13.920"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${outputlog}</arg>
<arg>[(40,)]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20221117 22:54:13.920" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20221117 22:54:13.920" endtime="20221117 22:54:13.920"/>
</kw>
<doc>| *Setup:*
| 0. Establish connection to db
| 1. Execute necessary DQ check
|
| *Teste Steps:*
| 2.Query DQ check for table</doc>
<tag>Task_1_Max_len_locations</tag>
<status status="PASS" starttime="20221117 22:54:13.901" endtime="20221117 22:54:13.920"/>
</test>
<test id="s1-t6" name="Check Check that all regions exists" line="78">
<kw name="Query" library="DatabaseLibrary">
<var>${outputlog}</var>
<arg>${Correct_Region}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20221117 22:54:13.920" level="INFO">Executing : Query  |  SELECT count(*) FROM TRN.hr.locations where country_id not in (select country_id from hr.regions) </msg>
<msg timestamp="20221117 22:54:13.920" level="INFO">${outputlog} = [(0,)]</msg>
<status status="PASS" starttime="20221117 22:54:13.920" endtime="20221117 22:54:13.920"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${outputlog}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221117 22:54:13.920" level="INFO">[(0,)]</msg>
<status status="PASS" starttime="20221117 22:54:13.920" endtime="20221117 22:54:13.920"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${outputlog}</arg>
<arg>[(0,)]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20221117 22:54:13.920" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20221117 22:54:13.920" endtime="20221117 22:54:13.920"/>
</kw>
<doc>| *Setup:*
| 0. Establish connection to db
| 1. Execute necessary DQ check
|
| *Teste Steps:*
| 2.Query DQ check for table</doc>
<tag>Task_1_Max_len_locations</tag>
<status status="PASS" starttime="20221117 22:54:13.920" endtime="20221117 22:54:13.920"/>
</test>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20221117 22:54:13.920" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20221117 22:54:13.920" endtime="20221117 22:54:13.920"/>
</kw>
<status status="PASS" starttime="20221117 22:54:13.811" endtime="20221117 22:54:13.920"/>
</suite>
<statistics>
<total>
<stat pass="6" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">Task_1_Employee_AVG_salary</stat>
<stat pass="1" fail="0" skip="0">Task_1_Employee_hire_date</stat>
<stat pass="2" fail="0" skip="0">Task_1_Max_len_locations</stat>
<stat pass="2" fail="0" skip="0">Task_1_Min_Min_salary</stat>
</tag>
<suite>
<stat pass="6" fail="0" skip="0" id="s1" name="MSSQL connect">MSSQL connect</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20221117 22:54:13.835" level="ERROR">Error in file 'C:\Project\other\DQ\DQrobot\tests\MSSQL_connect.robot' on line 6: Resource file '..\resources\variables.robot' does not exist.</msg>
</errors>
</robot>
